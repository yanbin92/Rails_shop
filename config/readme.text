#配置静态资源

config.assets.enabled 是个旗标，控制是否启用 Asset Pipeline。默认值为 true。

config.assets.raise_runtime_errors 设为 true 时启用额外的运行时错误检查。推荐在 config/environments/development.rb 中设定，以免部署到生产环境时遇到意料之外的错误。

config.assets.css_compressor 定义所用的 CSS 压缩程序。默认设为 sass-rails。目前唯一的另一个值是 :yui，使用 yui-compressor gem 压缩。

config.assets.js_compressor 定义所用的 JavaScript 压缩程序。可用的值有 :closure、:uglifier 和 :yui，分别使用 closure-compiler、uglifier 和 yui-compressor gem。

config.assets.gzip 是一个旗标，设定在静态资源的常规版本之外是否创建 gzip 版本。默认为 true。

config.assets.paths 包含查找静态资源的路径。在这个配置选项中追加的路径，会在里面寻找静态资源。

config.assets.precompile 设定运行 rake assets:precompile 任务时要预先编译的其他静态资源（除 application.css 和 application.js 之外）。

config.assets.prefix 定义伺服静态资源的前缀。默认为 /assets。

config.assets.manifest 定义静态资源预编译器使用的清单文件的完整路径。默认为 public 文件夹中 config.assets.prefix 设定的目录中的 manifest-<random>.json。

config.assets.digest 设定是否在静态资源的名称中包含 MD5 指纹。默认为 true。

config.assets.debug 禁止拼接和压缩静态文件。在 development.rb 文件中默认设为 true。

config.assets.compile 是一个旗标，设定在生产环境中是否启用实时 Sprockets 编译。

config.assets.logger 接受一个符合 Log4r 接口的日志记录器，或者默认的 Ruby Logger 类。默认值与 config.logger 相同。如果设为 false，不记录对静态资源的伺服。




配置生成器

Rails 允许通过 config.generators 方法调整生成器的行为。这个方法接受一个块：

config.generators do |g|
  g.orm :active_record
  g.test_framework :test_unit
end
在这个块中可以使用的全部方法如下：

assets 指定在生成脚手架时是否创建静态资源。默认为 true。

force_plural 指定模型名是否允许使用复数。默认为 false。

helper 指定是否生成辅助模块。默认为 true。

integration_tool 指定使用哪个集成工具生成集成测试。默认为 :test_unit。

javascripts 启用生成器中的 JavaScript 文件钩子。在 Rails 中供 scaffold 生成器使用。默认为 true。

javascript_engine 配置生成静态资源时使用的脚本引擎（如 coffee）。默认为 :js。

orm 指定使用哪个 ORM。默认为 false，即使用 Active Record。

resource_controller 指定 rails generate resource 使用哪个生成器生成控制器。默认为 :controller。

resource_route 指定是否生成资源路由。默认为 true。

scaffold_controller 与 resource_controller 不同，它指定 rails generate scaffold 使用哪个生成器生成脚手架中的控制器。默认为 :scaffold_controller。

stylesheets 启用生成器中的样式表钩子。在 Rails 中供 scaffold 生成器使用，不过也可以供其他生成器使用。默认为 true。

stylesheet_engine 配置生成静态资源时使用的样式表引擎（如 sass）。默认为 :css。

scaffold_stylesheet 生成脚手架中的资源时创建 scaffold.css。默认为 true。

test_framework 指定使用哪个测试框架。默认为 false，即使用 Minitest。

template_engine 指定使用哪个模板引擎，例如 ERB 或 Haml。默认为 :erb。


 配置中间件

每个 Rails 应用都自带一系列中间件，在开发环境中按下述顺序使用：

ActionDispatch::SSL 强制使用 HTTPS 伺服每个请求。config.force_ssl 设为 true 时启用。传给这个中间件的选项通过 config.ssl_options 配置。

ActionDispatch::Static 用于伺服静态资源。config.public_file_server.enabled 设为 false 时禁用。如果静态资源目录的索引文件不是 index，使用 config.public_file_server.index_name 指定。例如，请求目录时如果想伺服 main.html，而不是 index.html，把 config.public_file_server.index_name 设为 "main"。

ActionDispatch::Executor 以线程安全的方式重新加载代码。onfig.allow_concurrency 设为 false 时禁用，此时加载 Rack::Lock。Rack::Lock 把应用包装在 mutex 中，因此一次只能被一个线程调用。

ActiveSupport::Cache::Strategy::LocalCache 是基本的内存后端缓存。这个缓存对线程不安全，只应该用作单线程的临时内存缓存。

Rack::Runtime 设定 X-Runtime 首部，包含执行请求的时间（单位为秒）。

Rails::Rack::Logger 通知日志请求开始了。请求完成后，清空相关日志。

ActionDispatch::ShowExceptions 拯救应用抛出的任何异常，在本地或者把 config.consider_all_requests_local 设为 true 时渲染精美的异常页面。如果把 config.action_dispatch.show_exceptions 设为 false，异常总是抛出。

ActionDispatch::RequestId 在响应中添加 X-Request-Id 首部，并且启用 ActionDispatch::Request#uuid 方法。

ActionDispatch::RemoteIp 检查 IP 欺骗攻击，从请求首部中获取有效的 client_ip。可通过 config.action_dispatch.ip_spoofing_check 和 config.action_dispatch.trusted_proxies 配置。

Rack::Sendfile 截获从文件中伺服内容的响应，将其替换成服务器专属的 X-Sendfile 首部。可通过 config.action_dispatch.x_sendfile_header 配置。

ActionDispatch::Callbacks 在伺服请求之前运行准备回调。

ActiveRecord::ConnectionAdapters::ConnectionManagement 在每次请求后清理活跃的连接，除非请求环境的 rack.test 键为 true。

ActiveRecord::QueryCache 缓存请求中生成的所有 SELECT 查询。如果有 INSERT 或 UPDATE 查询，清空所有缓存。

ActionDispatch::Cookies 为请求设定 cookie。

ActionDispatch::Session::CookieStore 负责把会话存储在 cookie 中。可以把 config.action_controller.session_store 改为其他值，换成其他中间件。此外，可以使用 config.action_controller.session_options 配置传给这个中间件的选项。

ActionDispatch::Flash 设定 flash 键。仅当为 config.action_controller.session_store 设定值时可用。

Rack::MethodOverride 在设定了 params[:_method] 时允许覆盖请求方法。这是支持 PATCH、PUT 和 DELETE HTTP 请求的中间件。

Rack::Head 把 HEAD 请求转换成 GET 请求，然后以 GET 请求伺服。

除了这些常规中间件之外，还可以使用 config.middleware.use 方法添加：

config.middleware.use Magical::Unicorns
上述代码把 Magical::Unicorns 中间件添加到栈的末尾。如果想把中间件添加到另一个中间件的前面，可以使用 insert_before：

config.middleware.insert_before Rack::Head, Magical::Unicorns
此外，还有 insert_after。它把中间件添加到另一个中间件的后面：

config.middleware.insert_after Rack::Head, Magical::Unicorns
中间件也可以完全替换掉：

config.middleware.swap ActionController::Failsafe, Lifo::Failsafe
还可以从栈中移除：

config.middleware.delete Rack::MethodOverride